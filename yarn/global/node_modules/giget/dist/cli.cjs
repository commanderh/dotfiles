#!/usr/bin/env node
'use strict';

const node_path = require('node:path');
const mri = require('mri');
const colorette = require('colorette');
const giget = require('./shared/giget.3522139c.cjs');
require('node:fs/promises');
require('node:os');
require('node:fs');
require('tar');
require('pathe');
require('defu');
require('node:stream');
require('node:child_process');
require('node:util');
require('node-fetch-native');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e["default"] : e; }

const mri__default = /*#__PURE__*/_interopDefaultLegacy(mri);

async function main() {
  const args = mri__default(process.argv.slice(2), {
    boolean: ["help", "force", "force-clean", "offline", "prefer-offline", "shell", "verbose"],
    string: ["registry", "cwd", "auth"]
  });
  const input = args._[0];
  const dir = args._[1];
  if (!input || args.help || args.h) {
    console.error("Usage: npx getgit@latest <input> [<dir>] [--force] [--force-clean] [--offline] [--prefer-offline] [--shell] [--registry]  [--no-registry] [--verbose] [--cwd] [--auth]");
    process.exit(1);
  }
  if (args.verbose) {
    process.env.DEBUG = process.env.DEBUG || "true";
  }
  const r = await giget.downloadTemplate(input, {
    dir,
    force: args.force,
    forceClean: args["force-clean"],
    offline: args.offline,
    registry: args.registry,
    cwd: args.cwd,
    auth: args.auth
  });
  console.log(`\u2728 Successfully cloned ${colorette.cyan(r.name || r.url)} to ${colorette.cyan(node_path.relative(process.cwd(), r.dir))}
`);
  if (args.shell) {
    giget.startShell(r.dir);
  }
  process.exit(0);
}
main().catch((err) => {
  console.error(err);
  process.exit(1);
});
